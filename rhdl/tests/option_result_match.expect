Err(RHDLTypeError(RHDLTypeError { cause: PathMismatchInTypeInference, src: SourcePool { source: {FnID(b9a5016d045c09ae): SpannedSource { source: "fn do_stuff(i: Signal<Option<Result>, Red>) -> Signal<Option<ResponseCode>, Red> {\n    let d = match i.val() {\n        Some(Result::Ok(())) => Some(ResponseCode::OKAY),\n        Some(Result::Err(e)) => Some(err_map(e)),\n        None => None,\n    };\n    signal(d)\n}\n", name: "do_stuff", span_map: {N7: 119..139, N14: 214..215, N6: 124..138, N19: 235..239, N2: 91..92, N22: 87..247, N8: 148..166, N21: 95..246, N15: 206..216, N28: 0..263, N20: 227..240, N4: 101..108, N0: 12..13, N26: 252..261, N24: 259..260, N23: 87..247, N3: 101..102, N17: 177..218, N16: 201..217, N9: 143..167, N11: 194..195, N1: 12..42, N27: 81..263, N10: 119..168, N13: 177..197, N5: 135..137, N25: 252..261, N18: 227..231, N12: 182..196}, fallback: N28, filename: "rhdl/tests/option.rs:187", function_id: FnID(b9a5016d045c09ae) }}, ranges: {FnID(b9a5016d045c09ae): 0..264} }, err_span: SourceSpan { offset: SourceOffset(135), length: 2 } }))
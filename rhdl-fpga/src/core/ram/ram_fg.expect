//
module top(input wire [18:0] arg_0, output reg [7:0] out);
    reg [0:0] node_211;  // x
    reg [0:0] node_212;  // x
    reg [0:0] node_213;  // x
    reg [0:0] node_214;  // x
    reg [0:0] node_215;  // x
    reg [0:0] node_216;  // x
    reg [0:0] node_217;  // x
    reg [0:0] node_218;  // x
    reg [0:0] node_248;  // 0
    reg [0:0] node_249;  // 0
    reg [0:0] node_250;  // 0
    reg [0:0] node_251;  // 0
    reg [0:0] node_266;  // ?
    reg [0:0] node_267;  // ?
    reg [0:0] node_268;  // ?
    reg [0:0] node_269;  // ?
    reg [0:0] node_270;  // ?
    reg [0:0] node_271;  // ?
    reg [0:0] node_272;  // ?
    reg [0:0] node_273;  // ?
    reg [0:0] node_274;  // ?
    reg [0:0] node_275;  // ?
    reg [0:0] node_276;  // ?
    reg [0:0] node_277;  // ?
    reg [0:0] node_377;  // [uut]<-in<0, 0>
    reg [0:0] node_378;  // [uut]<-in<0, 1>
    reg [0:0] node_379;  // [uut]<-in<0, 2>
    reg [0:0] node_380;  // [uut]<-in<0, 3>
    reg [0:0] node_381;  // [uut]<-in<0, 4>
    reg [0:0] node_382;  // [uut]<-in<0, 5>
    reg [0:0] node_383;  // [uut]<-in<0, 6>
    reg [0:0] node_384;  // [uut]<-in<0, 7>
    reg [0:0] node_385;  // [uut]<-in<0, 8>
    reg [0:0] node_386;  // [uut]<-in<0, 9>
    reg [0:0] node_387;  // [uut]<-in<0, 10>
    reg [0:0] node_388;  // [uut]<-in<0, 11>
    reg [0:0] node_389;  // [uut]<-in<0, 12>
    reg [0:0] node_390;  // [uut]<-in<0, 13>
    reg [0:0] node_391;  // [uut]<-in<0, 14>
    reg [0:0] node_392;  // [uut]<-in<0, 15>
    reg [0:0] node_393;  // [uut]<-in<0, 16>
    reg [0:0] node_394;  // [uut]<-in<0, 17>
    reg [0:0] node_395;  // [uut]<-in<0, 18>
    reg [0:0] node_396;  // [uut]->out<0>
    reg [0:0] node_397;  // [uut]->out<1>
    reg [0:0] node_398;  // [uut]->out<2>
    reg [0:0] node_399;  // [uut]->out<3>
    reg [0:0] node_400;  // [uut]->out<4>
    reg [0:0] node_401;  // [uut]->out<5>
    reg [0:0] node_402;  // [uut]->out<6>
    reg [0:0] node_403;  // [uut]->out<7>
    reg [0:0] node_458;  // uut_inner_inner_0[0]
    reg [0:0] node_459;  // uut_inner_inner_1[1]
    reg [0:0] node_460;  // uut_inner_inner_2[2]
    reg [0:0] node_461;  // uut_inner_inner_3[3]
    reg [0:0] node_462;  // uut_inner_inner_4[4]
    reg [0:0] node_463;  // uut_inner_inner_5[5]
    reg [0:0] node_464;  // uut_inner_inner_6[6]
    reg [0:0] node_465;  // uut_inner_inner_7[7]
    reg [0:0] node_466;  // uut_inner_inner_8[8]
    reg [0:0] node_467;  // uut_inner_inner_9[9]
    reg [0:0] node_468;  // uut_inner_inner_10[10]
    reg [0:0] node_469;  // uut_inner_inner_11[11]
    reg [0:0] node_470;  // uut_inner_inner_12[12]
    reg [0:0] node_471;  // uut_inner_inner_13[13]
    reg [0:0] node_472;  // uut_inner_inner_14[14]
    reg [0:0] node_473;  // uut_inner_inner_15[15]
    reg [0:0] node_474;  // uut_inner_inner_16[16]
    reg [0:0] node_475;  // uut_inner_inner_17[17]
    reg [0:0] node_476;  // uut_inner_inner_18[18]
    wire [0:0] node_477;  // uut_inner_inner_0[0]
    wire [0:0] node_478;  // uut_inner_inner_1[1]
    wire [0:0] node_479;  // uut_inner_inner_2[2]
    wire [0:0] node_480;  // uut_inner_inner_3[3]
    wire [0:0] node_481;  // uut_inner_inner_4[4]
    wire [0:0] node_482;  // uut_inner_inner_5[5]
    wire [0:0] node_483;  // uut_inner_inner_6[6]
    wire [0:0] node_484;  // uut_inner_inner_7[7]
    uut_inner_inner bb_0 (.o({ node_484, node_483, node_482, node_481, node_480, node_479, node_478, node_477 }),.i({ node_476, node_475, node_474, node_473, node_472, node_471, node_470, node_469, node_468, node_467, node_466, node_465, node_464, node_463, node_462, node_461, node_460, node_459, node_458 }));
    always @(*) begin
        node_403 = node_484;
        node_402 = node_483;
        node_401 = node_482;
        node_400 = node_481;
        node_399 = node_480;
        node_398 = node_479;
        node_397 = node_478;
        node_396 = node_477;
        node_395 = arg_0[18];
        node_476 = node_395;
        node_394 = arg_0[17];
        node_475 = node_394;
        node_393 = arg_0[16];
        node_474 = node_393;
        node_392 = arg_0[15];
        node_473 = node_392;
        node_391 = arg_0[14];
        node_472 = node_391;
        node_390 = arg_0[13];
        node_470 = node_390;
        node_389 = arg_0[12];
        node_388 = arg_0[11];
        node_387 = arg_0[10];
        node_386 = arg_0[9];
        node_385 = arg_0[8];
        node_384 = arg_0[7];
        node_383 = arg_0[6];
        node_382 = arg_0[5];
        node_381 = arg_0[4];
        node_380 = arg_0[3];
        node_379 = arg_0[2];
        node_378 = arg_0[1];
        node_377 = arg_0[0];
        node_471 = node_377;
        // w.addr = bits(0)
        node_251 = 1'b0;
        // if let Some((addr, data)) = i_val.data {
        //         w.data = data;
        //         w.enable = true;
        //         w.addr = addr;
        //     } else {
        //         w.data = T::dont_care();
        //         w.enable = false;
        //         w.addr = bits(0);
        //     }
        node_269 = (node_390) ? (node_381) : (node_251);
        node_461 = node_269;
        // w.addr = bits(0)
        node_250 = 1'b0;
        // if let Some((addr, data)) = i_val.data {
        //         w.data = data;
        //         w.enable = true;
        //         w.addr = addr;
        //     } else {
        //         w.data = T::dont_care();
        //         w.enable = false;
        //         w.addr = bits(0);
        //     }
        node_268 = (node_390) ? (node_380) : (node_250);
        node_460 = node_268;
        // w.addr = bits(0)
        node_249 = 1'b0;
        // if let Some((addr, data)) = i_val.data {
        //         w.data = data;
        //         w.enable = true;
        //         w.addr = addr;
        //     } else {
        //         w.data = T::dont_care();
        //         w.enable = false;
        //         w.addr = bits(0);
        //     }
        node_267 = (node_390) ? (node_379) : (node_249);
        node_459 = node_267;
        // w.addr = bits(0)
        node_248 = 1'b0;
        // if let Some((addr, data)) = i_val.data {
        //         w.data = data;
        //         w.enable = true;
        //         w.addr = addr;
        //     } else {
        //         w.data = T::dont_care();
        //         w.enable = false;
        //         w.addr = bits(0);
        //     }
        node_266 = (node_390) ? (node_378) : (node_248);
        node_458 = node_266;
        // w.data = T::dont_care()
        node_218 = 1'bx;
        // if let Some((addr, data)) = i_val.data {
        //         w.data = data;
        //         w.enable = true;
        //         w.addr = addr;
        //     } else {
        //         w.data = T::dont_care();
        //         w.enable = false;
        //         w.addr = bits(0);
        //     }
        node_277 = (node_390) ? (node_389) : (node_218);
        node_469 = node_277;
        // w.data = T::dont_care()
        node_217 = 1'bx;
        // if let Some((addr, data)) = i_val.data {
        //         w.data = data;
        //         w.enable = true;
        //         w.addr = addr;
        //     } else {
        //         w.data = T::dont_care();
        //         w.enable = false;
        //         w.addr = bits(0);
        //     }
        node_276 = (node_390) ? (node_388) : (node_217);
        node_468 = node_276;
        // w.data = T::dont_care()
        node_216 = 1'bx;
        // if let Some((addr, data)) = i_val.data {
        //         w.data = data;
        //         w.enable = true;
        //         w.addr = addr;
        //     } else {
        //         w.data = T::dont_care();
        //         w.enable = false;
        //         w.addr = bits(0);
        //     }
        node_275 = (node_390) ? (node_387) : (node_216);
        node_467 = node_275;
        // w.data = T::dont_care()
        node_215 = 1'bx;
        // if let Some((addr, data)) = i_val.data {
        //         w.data = data;
        //         w.enable = true;
        //         w.addr = addr;
        //     } else {
        //         w.data = T::dont_care();
        //         w.enable = false;
        //         w.addr = bits(0);
        //     }
        node_274 = (node_390) ? (node_386) : (node_215);
        node_466 = node_274;
        // w.data = T::dont_care()
        node_214 = 1'bx;
        // if let Some((addr, data)) = i_val.data {
        //         w.data = data;
        //         w.enable = true;
        //         w.addr = addr;
        //     } else {
        //         w.data = T::dont_care();
        //         w.enable = false;
        //         w.addr = bits(0);
        //     }
        node_273 = (node_390) ? (node_385) : (node_214);
        node_465 = node_273;
        // w.data = T::dont_care()
        node_213 = 1'bx;
        // if let Some((addr, data)) = i_val.data {
        //         w.data = data;
        //         w.enable = true;
        //         w.addr = addr;
        //     } else {
        //         w.data = T::dont_care();
        //         w.enable = false;
        //         w.addr = bits(0);
        //     }
        node_272 = (node_390) ? (node_384) : (node_213);
        node_464 = node_272;
        // w.data = T::dont_care()
        node_212 = 1'bx;
        // if let Some((addr, data)) = i_val.data {
        //         w.data = data;
        //         w.enable = true;
        //         w.addr = addr;
        //     } else {
        //         w.data = T::dont_care();
        //         w.enable = false;
        //         w.addr = bits(0);
        //     }
        node_271 = (node_390) ? (node_383) : (node_212);
        node_463 = node_271;
        // w.data = T::dont_care()
        node_211 = 1'bx;
        // if let Some((addr, data)) = i_val.data {
        //         w.data = data;
        //         w.enable = true;
        //         w.addr = addr;
        //     } else {
        //         w.data = T::dont_care();
        //         w.enable = false;
        //         w.addr = bits(0);
        //     }
        node_270 = (node_390) ? (node_382) : (node_211);
        node_462 = node_270;
        out = { node_403, node_402, node_401, node_400, node_399, node_398, node_397, node_396 };
    end
endmodule
//
module uut_inner_inner(input wire [18:0] i, output reg [7:0] o);
    wire [3:0] read_addr;
    wire [0:0] read_clk;
    wire [3:0] write_addr;
    wire [7:0] write_data;
    wire [0:0] write_enable;
    wire [0:0] write_clk;
    reg [7:0] mem[15:0];
    initial begin
        mem[0] = 8'b00001111;
        mem[1] = 8'b00001110;
        mem[2] = 8'b00001101;
        mem[3] = 8'b00001100;
        mem[4] = 8'b00001011;
        mem[5] = 8'b00001010;
        mem[6] = 8'b00001001;
        mem[7] = 8'b00001000;
        mem[8] = 8'b00000111;
        mem[9] = 8'b00000110;
        mem[10] = 8'b00000101;
        mem[11] = 8'b00000100;
        mem[12] = 8'b00000011;
        mem[13] = 8'b00000010;
        mem[14] = 8'b00000001;
        mem[15] = 8'b00000000;
    end
    assign read_addr = i[17:14];
    assign read_clk = i[18];
    assign write_addr = i[3:0];
    assign write_data = i[11:4];
    assign write_enable = i[12];
    assign write_clk = i[13];
    always @(posedge read_clk) begin
        o <= mem[read_addr];
    end
    always @(posedge write_clk) begin
        if (write_enable)
        begin
            mem[write_addr] <= write_data;
        end
    end
endmodule
